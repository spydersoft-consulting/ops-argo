alloy:
  alloy:
    extraPorts:
      - name: "otlp-grpc"
        port: 4317
        targetPort: 4317
        protocol: "TCP"
      - name: "otlp-http"
        port: 4318
        targetPort: 4318
        protocol: "TCP"
    configMap:
      content: |
        
        remote.kubernetes.secret "vault_app_role_secret" {
          namespace = "cluster-tools"
          name = "k8-app-role-secret"
        }

        remote.vault "hass" {
          server = "https://hcvault.mattgerega.net"
          path = "secrets-k8/hass"

          auth.approle {
            role_id = "13f4cd25-b02f-f705-c92d-ef6bfeff1344"
            secret = remote.kubernetes.secret.vault_app_role_secret.data["secret-id"]
          }
        }

        remote.vault "targets" {
          server = "https://hcvault.mattgerega.net"
          path = "secrets-k8/monitoring/targets/internal"

          auth.approle {
            role_id = "13f4cd25-b02f-f705-c92d-ef6bfeff1344"
            secret = remote.kubernetes.secret.vault_app_role_secret.data["secret-id"]
          }
        }

        remote.vault "minio" {
          server = "https://hcvault.mattgerega.net"
          path = "secrets-k8/monitoring/minio"

          auth.approle {
            role_id = "13f4cd25-b02f-f705-c92d-ef6bfeff1344"
            secret = remote.kubernetes.secret.vault_app_role_secret.data["secret-id"]
          }
        }

        remote.vault "vault" {
          server = "https://hcvault.mattgerega.net"
          path = "secrets-k8/monitoring/vault"

          auth.approle {
            role_id = "13f4cd25-b02f-f705-c92d-ef6bfeff1344"
            secret = remote.kubernetes.secret.vault_app_role_secret.data["secret-id"]
          }
        }

        prometheus.remote_write "default" {
          endpoint {
            url = "https://mimir.mattgerega.net/api/v1/push"
            headers = {
              "X-Scope-OrgID" = "production",
            }
          }
          external_labels = {
            cluster = "production",
            custom_source = "grafana-alloy",
          }
        }

        // Scrape configuration for Home Assistant Metrics
        prometheus.scrape "hass" {
          targets = [{
            __address__ = "home.mattgerega.net",
          }]
          forward_to   = [prometheus.remote_write.default.receiver]
          job_name     = "hass"
          metrics_path = "/api/prometheus"
          scheme       = "https"

          authorization {
            type        = "Bearer"
            credentials = remote.vault.hass.data.token
          }
        }

        prometheus.scrape "minio_job" {
          targets = [{
            __address__ = convert.nonsensitive(remote.vault.targets.data["minio-target"]),
          }]
          forward_to   = [prometheus.remote_write.default.receiver]
          job_name     = "minio-job"
          metrics_path = "/minio/v2/metrics/cluster"

          authorization {
            type        = "Bearer"
            credentials = remote.vault.minio.data.authtoken
          }
        }

        prometheus.scrape "vault_job" {
          targets = [{
            __address__ = convert.nonsensitive(remote.vault.targets.data["vault-target"]),
          }]
          forward_to = [prometheus.remote_write.default.receiver]
          job_name   = "vault-job"
          params     = {
            format = ["prometheus"],
          }
          metrics_path = "/v1/sys/metrics"
          scheme       = "https"

          authorization {
            type        = "Bearer"
            credentials = remote.vault.vault.data["metric-token"]
          }
        }


        loki.write "default" {
          endpoint {
            url = "https://loki.mattgerega.net/loki/api/v1/push"
            tenant_id = "production"
          }
          external_labels = {
            cluster = "production",
            custom_source = "grafana-alloy",
          }
        }

        otelcol.processor.memory_limiter "default" {
          check_interval = "1s"
          limit          = "1GiB"

          output {
            metrics = [otelcol.processor.batch.default.input]
            logs    = [otelcol.processor.batch.default.input]
            traces  = [otelcol.processor.batch.default.input]
          }
        }

        otelcol.processor.batch "default" {
          output {
            metrics = [otelcol.exporter.prometheus.default.input]
            logs    = [otelcol.exporter.loki.default.input]
            traces  = [otelcol.exporter.otlp.default.input]
          }
        }
        otelcol.receiver.otlp "example" {
          grpc {
            endpoint = "0.0.0.0:4317"
          }

          http {
            endpoint = "0.0.0.0:4318"
          }

          output {
            metrics = [otelcol.processor.batch.default.input]
            logs    = [otelcol.processor.batch.default.input]
            traces  = [otelcol.processor.batch.default.input]
          }
        }

        otelcol.exporter.loki "default" {
          forward_to = [loki.write.default.receiver]
        }

        otelcol.exporter.prometheus "default" {
          forward_to = [prometheus.remote_write.default.receiver]
        }

        otelcol.exporter.otlp "default" {
          client {
            endpoint = "tfx-internal.gerega.net:32326"
            headers = {
              "X-Scope-OrgID" = "production",
            }
            tls {
              insecure = true
            }
          }
        }
