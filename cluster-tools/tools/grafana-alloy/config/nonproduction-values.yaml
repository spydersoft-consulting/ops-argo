alloy:
  alloy:
    configMap:
      content: |
        prometheus.remote_write "default" {
          endpoint {
            url = "https://mimir.mattgerega.net/api/v1/push"
          }
        }
        loki.write "default" {
          endpoint {
            url = "https://loki.mattgerega.net/loki/api/v1/push"
          }
        }

        discovery.kubernetes "pod" {
          role = "pod"
          selectors {
            role  = "pod"
            field = "spec.nodeName=" + coalesce(env("HOSTNAME"), constants.hostname)
          }
        }

        // discovery.relabel rewrites the label set of the input targets by applying one or more relabeling rules.
        // If no rules are defined, then the input targets are exported as-is.
        discovery.relabel "pod_logs" {
          targets = discovery.kubernetes.pod.targets

          // drop all metrics from the go runtime
          rule {
            source_labels = ["__name__"]
            regex = "go_.*"
            action = "drop"
          }

          // drop all metrics from prometheus
          rule {
            source_labels = ["__name__"]
            regex = "prometheus_.*"
            action = "drop"
          }

          // Drop all linkerd containers
          rule {
            source_labels = ["__meta_kubernetes_pod_container_name"]
            regex = "linkerd-.*"
            action = "drop"
          }

          // drop all kube-system pods
          rule {
            source_labels = ["__meta_kubernetes_namespace"]
            regex = "kube-system"
            action = "drop"
          }

          // Label creation - "namespace" field from "__meta_kubernetes_namespace"
          rule {
            source_labels = ["__meta_kubernetes_namespace"]
            action = "replace"
            target_label = "namespace"
          }

          // Label creation - "pod" field from "__meta_kubernetes_pod_name"
          rule {
            source_labels = ["__meta_kubernetes_pod_name"]
            action = "replace"
            target_label = "pod"
          }

          // Label creation - "container" field from "__meta_kubernetes_pod_container_name"
          rule {
            source_labels = ["__meta_kubernetes_pod_container_name"]
            action = "replace"
            target_label = "container"
          }

          // Label creation -  "app" field from "__meta_kubernetes_pod_label_app_kubernetes_io_name"
          rule {
            source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
            action = "replace"
            target_label = "app"
          }

          // Label creation -  "job" field from "__meta_kubernetes_namespace" and "__meta_kubernetes_pod_container_name"
          // Concatenate values __meta_kubernetes_namespace/__meta_kubernetes_pod_container_name
          rule {
            source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_container_name"]
            action = "replace"
            target_label = "job"
            separator = "/"
            replacement = "$1"
          }

          // Label creation - "container" field from "__meta_kubernetes_pod_uid" and "__meta_kubernetes_pod_container_name"
          // Concatenate values __meta_kubernetes_pod_uid/__meta_kubernetes_pod_container_name.log
          rule {
            source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
            action = "replace"
            target_label = "__path__"
            separator = "/"
            replacement = "/var/log/pods/*$1/*.log"
          }

          // Label creation -  "container_runtime" field from "__meta_kubernetes_pod_container_id"
          rule {
            source_labels = ["__meta_kubernetes_pod_container_id"]
            action = "replace"
            target_label = "container_runtime"
            regex = "^(\\S+):\\/\\/.+$"
            replacement = "$1"
          }
        }

        // loki.source.kubernetes tails logs from Kubernetes containers using the Kubernetes API.
        loki.source.kubernetes "pod_logs" {
          targets    = discovery.relabel.pod_logs.output
          forward_to = [loki.process.pod_logs.receiver]
        }

        // loki.process receives log entries from other Loki components, applies one or more processing stages,
        // and forwards the results to the list of receivers in the component's arguments.
        loki.process "pod_logs" {
          stage.static_labels {
              values = {
                cluster = "nonproduction",
              }
          }

          forward_to = [loki.write.default.receiver]
        }